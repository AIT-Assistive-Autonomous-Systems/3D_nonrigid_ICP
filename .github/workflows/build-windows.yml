name: Build on Windows

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-2022
    env:
      SHORT_WS: C:\w
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create short path junction
        shell: cmd
        run: |
          if exist %SHORT_WS% rmdir %SHORT_WS%
          mklink /J %SHORT_WS% %GITHUB_WORKSPACE%

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: vcpkg build
        uses: johnwason/vcpkg-action@v7
        id: vcpkg
        with:
          manifest-dir: ${{ env.SHORT_WS }}
          triplet: x64-windows
          cache-key: windows-2022-eigen3-spdlog-nanoflann-cxxopts
          token: ${{ github.token }}

      - name: Set up Miniconda (for PDAL)
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          activate-environment: pdal-env
          python-version: 3.11
          channels: conda-forge
          channel-priority: strict

      - name: Install PDAL via conda
        shell: bash -l {0}
        run: |
          echo "Conda info before install:"
          conda info
          conda install -y pdal
          echo "PDAL version:"
          pdal --version || true
          echo "Listing PDAL related libs:"
          ls -1 "$CONDA_PREFIX/Library/bin" 2>/dev/null | grep -i pdal || true
          echo "CONDA_PREFIX=$CONDA_PREFIX" >> $GITHUB_ENV

      - name: Configure CMake
        working-directory: ${{ env.SHORT_WS }}
        shell: powershell
        run: |
          Write-Host "Using CONDA_PREFIX=$env:CONDA_PREFIX"
          # Build PDAL CMake config path (Join-Path only supports two arguments; use Path.Combine for multiple)
          $pdalDir = [System.IO.Path]::Combine($env:CONDA_PREFIX,'Library','lib','cmake','PDAL')
          if (-not (Test-Path $pdalDir)) {
            Write-Host "Primary PDAL config path not found: $pdalDir"
            $scanRoot = [System.IO.Path]::Combine($env:CONDA_PREFIX,'Library','lib','cmake')
            if (Test-Path $scanRoot) {
              $found = Get-ChildItem -Path $scanRoot -Directory -Filter 'PDAL*' -ErrorAction SilentlyContinue | Where-Object { Test-Path (Join-Path $_.FullName 'PDALConfig.cmake') } | Select-Object -First 1
              if ($found) {
                $pdalDir = $found.FullName
                Write-Host "Found PDAL config directory via scan: $pdalDir"
              } else {
                Write-Host "Warning: Could not locate PDALConfig.cmake under $scanRoot"
              }
            } else {
              Write-Host "Warning: CMake modules root not found: $scanRoot"
            }
          } else {
            Write-Host "Found PDAL config at $pdalDir"
          }
          cmake -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release -DPDAL_DIR="${pdalDir}" ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}

      - name: Build
        working-directory: ${{ env.SHORT_WS }}
        run: cmake --build build --config Release --parallel

      - name: Create distribution directory
        working-directory: ${{ env.SHORT_WS }}
        run: |
          New-Item -ItemType Directory -Force -Path "dist" | Out-Null
          New-Item -ItemType Directory -Force -Path "dist/bin" | Out-Null

      - name: Copy executables
        working-directory: ${{ env.SHORT_WS }}
        run: |
          Copy-Item "build/Release/nonrigid-icp.exe" "dist/bin/"
          Copy-Item "build/Release/nonrigid-icp-transform.exe" "dist/bin/"

      - name: Find and copy DLL dependencies
        shell: powershell
        working-directory: ${{ env.SHORT_WS }}
        run: |
          function Get-Dependencies {
            param($FilePath, $ProcessedFiles, $DistBinPath, $VcpkgBinPath)
            if ($ProcessedFiles -contains $FilePath) { return }
            $ProcessedFiles.Add($FilePath) | Out-Null
            Write-Host "Processing: $FilePath"
            $dumpbinPath = Get-ChildItem "C:\Program Files\Microsoft Visual Studio\2022\*\VC\Tools\MSVC\*\bin\Hostx64\x64\dumpbin.exe" | Select-Object -First 1
            if (-not $dumpbinPath) { Write-Host "Warning: dumpbin.exe not found"; return }
            $deps = & $dumpbinPath.FullName /dependents $FilePath 2>$null | Select-String "\.dll" | ForEach-Object { $_.Line.Trim() }
            foreach ($dep in $deps) {
              if ($dep -match "^\s*([a-zA-Z0-9_\-\.]+\.dll)\s*$") {
                $dllName = $matches[1]
                if ($dllName -match "^(kernel32|user32|gdi32|winspool|comdlg32|advapi32|shell32|ole32|oleaut32|uuid|odbc32|odbccp32|msvcrt|vcruntime|api-ms-|ucrtbase|msvcp)") { continue }
                $vcpkgDllPath = Join-Path $VcpkgBinPath $dllName
                $distDllPath = Join-Path $DistBinPath $dllName
                if (Test-Path $vcpkgDllPath) {
                  if (-not (Test-Path $distDllPath)) { Write-Host "Copying dependency (vcpkg): $dllName"; Copy-Item $vcpkgDllPath $DistBinPath }
                  Get-Dependencies -FilePath $distDllPath -ProcessedFiles $ProcessedFiles -DistBinPath $DistBinPath -VcpkgBinPath $VcpkgBinPath
                } else {
                  if ($condaBinPath -and (Test-Path (Join-Path $condaBinPath $dllName))) {
                    if (-not (Test-Path $distDllPath)) { Write-Host "Copying dependency (conda): $dllName"; Copy-Item (Join-Path $condaBinPath $dllName) $DistBinPath }
                    Get-Dependencies -FilePath $distDllPath -ProcessedFiles $ProcessedFiles -DistBinPath $DistBinPath -VcpkgBinPath $VcpkgBinPath
                  } else { Write-Host "Warning: Could not find $dllName in vcpkg or conda paths" }
                }
              }
            }
          }
          $processedFiles = New-Object System.Collections.Generic.HashSet[string]
          $vcpkgBinPath = "build\vcpkg_installed\x64-windows\bin"
          $distBinPath = "dist\bin"
          # Build conda bin path (Join-Path supports only two segments at a time, so use Path.Combine for multiple)
          if ($env:CONDA_PREFIX) {
            $condaBinPath = [System.IO.Path]::Combine($env:CONDA_PREFIX,'Library','bin')
            if (-not (Test-Path $condaBinPath)) { Write-Host "Warning: Expected conda bin path not found: $condaBinPath" }
          } else {
            $condaBinPath = $null
          }
          Write-Host "vcpkg bin path: $vcpkgBinPath"
          Write-Host "conda bin path: $condaBinPath"
          Write-Host "Distribution bin path: $distBinPath"
          if (Test-Path "dist\bin\nonrigid-icp.exe") { Get-Dependencies -FilePath "dist\bin\nonrigid-icp.exe" -ProcessedFiles $processedFiles -DistBinPath $distBinPath -VcpkgBinPath $vcpkgBinPath } else { Write-Host "Warning: nonrigid-icp.exe not found" }
          if (Test-Path "dist\bin\nonrigid-icp-transform.exe") { Get-Dependencies -FilePath "dist\bin\nonrigid-icp-transform.exe" -ProcessedFiles $processedFiles -DistBinPath $distBinPath -VcpkgBinPath $vcpkgBinPath } else { Write-Host "Warning: nonrigid-icp-transform.exe not found" }
          Write-Host "Final contents of dist/bin:"; Get-ChildItem "dist\bin" | ForEach-Object { Write-Host "  $($_.Name)" }

      - name: Create README for distribution
        shell: powershell
        working-directory: ${{ env.SHORT_WS }}
        run: |
          $readme = @"
          # 3D Non-Rigid Tricubic Point Cloud Registration - Windows Distribution

          This package contains the Windows executables and all necessary DLL dependencies.

          ## Executables
          - **nonrigid-icp.exe** - Main registration tool for non-rigid point cloud registration
          - **nonrigid-icp-transform.exe** - Transform application tool

          ## Usage
          Open Command Prompt or PowerShell in this directory and run:

          ```cmd
          nonrigid-icp.exe --help
          nonrigid-icp-transform.exe --help
          ```

          ## System Requirements
          - Windows 10/11 (x64)
          - Visual C++ Redistributable 2022 (usually already installed)

          Built with Microsoft Visual Studio 2022, vcpkg (core C++ deps) and conda-forge PDAL.
          "@
          $readme | Out-File -FilePath "dist\README.md" -Encoding utf8

      - name: Test executables
        shell: powershell
        working-directory: ${{ env.SHORT_WS }}
        run: |
          Write-Host "Testing executables..."
          Write-Host "Testing nonrigid-icp.exe..."
          try { & "dist\bin\nonrigid-icp.exe" --help; Write-Host "nonrigid-icp.exe runs successfully" } catch { Write-Host "Help failed; trying launch"; $p = Start-Process -FilePath "dist\bin\nonrigid-icp.exe" -PassThru -NoNewWindow -Wait; Write-Host "ExitCode=$($p.ExitCode)" }
          Write-Host "Testing nonrigid-icp-transform.exe..."
          try { & "dist\bin\nonrigid-icp-transform.exe" --help; Write-Host "nonrigid-icp-transform.exe runs successfully" } catch { Write-Host "Help failed; trying launch"; $p = Start-Process -FilePath "dist\bin\nonrigid-icp-transform.exe" -PassThru -NoNewWindow -Wait; Write-Host "ExitCode=$($p.ExitCode)" }

      - name: Create ZIP archive
        shell: powershell
        working-directory: ${{ env.SHORT_WS }}
        run: |
          Compress-Archive -Path "dist\*" -DestinationPath "nonrigid-icp-windows-x64.zip"
          Write-Host "Archive contents:"; Add-Type -AssemblyName System.IO.Compression.FileSystem; $zip = [System.IO.Compression.ZipFile]::OpenRead("nonrigid-icp-windows-x64.zip"); $zip.Entries | ForEach-Object { Write-Host "  $($_.FullName) ($($_.Length) bytes)" }; $zip.Dispose()

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-executables-Release
          path: |
            C:/w/nonrigid-icp-windows-x64.zip
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-executables-Release
          path: ./release-artifacts
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release-artifacts/nonrigid-icp-windows-x64.zip
          generate_release_notes: true
          name: "3D Non-Rigid ICP ${{ github.ref_name }}"
          body: |
            ## Downloads
            - `nonrigid-icp-windows-x64.zip` - Windows executables with all dependencies

            ## Usage
            Extract the ZIP file and run:
            ```cmd
            nonrigid-icp.exe --help
            nonrigid-icp-transform.exe --help
            ```

            ## System Requirements
            - Windows 10/11 (x64)
            - Visual C++ Redistributable 2022 (usually already installed)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
