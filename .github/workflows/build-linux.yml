name: Build on Linux

on:
  push:
    branches: ["**"]
    tags: ["v*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build and Run Dev Container
        uses: devcontainers/ci@v0.3
        with:
          imageName: ghcr.io/ait-assistive-autonomous-systems/3d-nonrigid-icp-dev
          cacheFrom: ghcr.io/ait-assistive-autonomous-systems/3d-nonrigid-icp-dev
          push: never
          runCmd: |
            # Configure CMake
            cmake -B build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DPDAL_DIR="/opt/miniconda/lib/cmake/PDAL" \
              -DCMAKE_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"

            # Build the project
            cmake --build build --config Release --parallel

            # Install AppImage dependencies
            sudo apt-get update && sudo apt-get install -y wget fuse libfuse2

            # Download AppImage tools
            wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
            chmod +x appimagetool-x86_64.AppImage

            wget -q https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
            chmod +x linuxdeploy-x86_64.AppImage

            # Extract AppImage tools to avoid FUSE issues in CI
            ./appimagetool-x86_64.AppImage --appimage-extract >/dev/null
            mv squashfs-root appimagetool-extracted

            ./linuxdeploy-x86_64.AppImage --appimage-extract >/dev/null
            mv squashfs-root linuxdeploy-extracted

            # Create wrapper scripts for easier use
            echo '#!/bin/bash' > appimagetool
            echo 'exec "$(dirname "$0")/appimagetool-extracted/AppRun" "$@"' >> appimagetool
            chmod +x appimagetool

            echo '#!/bin/bash' > linuxdeploy
            echo 'exec "$(dirname "$0")/linuxdeploy-extracted/AppRun" "$@"' >> linuxdeploy
            chmod +x linuxdeploy

            # Create AppImage for nonrigid-icp
            ./linuxdeploy --appdir AppDir-nonrigid-icp --executable bin/nonrigid-icp

            # Copy conda C++ runtime libraries to fix compatibility issues
            cp /opt/miniconda/lib/libstdc++.so.6* AppDir-nonrigid-icp/usr/lib/ || true
            cp /opt/miniconda/lib/libgcc_s.so.1* AppDir-nonrigid-icp/usr/lib/ || true

            # Create a simple AppRun script for CLI usage
            cat > AppDir-nonrigid-icp/AppRun << 'EOF'
            #!/bin/bash
            HERE="$(dirname "$(readlink -f "${0}")")"
            export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
            exec "${HERE}/usr/bin/nonrigid-icp" "$@"
            EOF
            chmod +x AppDir-nonrigid-icp/AppRun

            # Create minimal desktop file (required by AppImage spec, even for CLI)
            cat > AppDir-nonrigid-icp/nonrigid-icp.desktop << 'EOF'
            [Desktop Entry]
            Type=Application
            Name=nonrigid-icp
            Exec=nonrigid-icp
            Icon=nonrigid-icp
            Categories=Utility;
            Terminal=true
            NoDisplay=true
            EOF

            # Create a dummy icon (required by AppImage spec)
            echo -e '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x19tEXtSoftware\x00Adobe ImageReadyq\xc9e<\x00\x00\x00\x0eIDATx\xdab\x00\x02\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82' > AppDir-nonrigid-icp/nonrigid-icp.png

            # Build AppImage using extracted appimagetool
            ./appimagetool --no-appstream AppDir-nonrigid-icp nonrigid-icp-x86_64.AppImage

            # Create AppImage for nonrigid-icp-transform
            ./linuxdeploy --appdir AppDir-nonrigid-icp-transform --executable bin/nonrigid-icp-transform

            # Copy conda C++ runtime libraries to fix compatibility issues
            cp /opt/miniconda/lib/libstdc++.so.6* AppDir-nonrigid-icp-transform/usr/lib/ || true
            cp /opt/miniconda/lib/libgcc_s.so.1* AppDir-nonrigid-icp-transform/usr/lib/ || true

            # Create a simple AppRun script for CLI usage
            cat > AppDir-nonrigid-icp-transform/AppRun << 'EOF'
            #!/bin/bash
            HERE="$(dirname "$(readlink -f "${0}")")"
            export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
            exec "${HERE}/usr/bin/nonrigid-icp-transform" "$@"
            EOF
            chmod +x AppDir-nonrigid-icp-transform/AppRun

            # Create minimal desktop file (required by AppImage spec, even for CLI)
            cat > AppDir-nonrigid-icp-transform/nonrigid-icp-transform.desktop << 'EOF'
            [Desktop Entry]
            Type=Application
            Name=nonrigid-icp-transform
            Exec=nonrigid-icp-transform
            Icon=nonrigid-icp-transform
            Categories=Utility;
            Terminal=true
            NoDisplay=true
            EOF

            # Create a dummy icon (required by AppImage spec)
            echo -e '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00 \x00\x00\x00 \x08\x02\x00\x00\x00\xfc\x18\xed\xa3\x00\x00\x00\x19tEXtSoftware\x00Adobe ImageReadyq\xc9e<\x00\x00\x00\x0eIDATx\xdab\x00\x02\x00\x00\x05\x00\x01\r\n-\xdb\x00\x00\x00\x00IEND\xaeB`\x82' > AppDir-nonrigid-icp-transform/nonrigid-icp-transform.png

            # Build AppImage using extracted appimagetool
            ./appimagetool --no-appstream AppDir-nonrigid-icp-transform nonrigid-icp-transform-x86_64.AppImage

            # Show file sizes
            ls -lh *.AppImage

      - name: Upload AppImage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimages-Release
          path: |
            nonrigid-icp-x86_64.AppImage
            nonrigid-icp-transform-x86_64.AppImage
          retention-days: 7

  release:
    needs: build
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download AppImage artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-appimages-Release
          path: ./release-artifacts

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release-artifacts/nonrigid-icp-x86_64.AppImage
            ./release-artifacts/nonrigid-icp-transform-x86_64.AppImage
          generate_release_notes: true
          name: "3D Non-Rigid ICP ${{ github.ref_name }}"
          body: |
            ## Downloads
            - `nonrigid-icp-x86_64.AppImage` - Main registration tool
            - `nonrigid-icp-transform-x86_64.AppImage` - Transform application tool

            ## Usage
            ```bash
            chmod +x *.AppImage
            ./nonrigid-icp-x86_64.AppImage --help
            ./nonrigid-icp-transform-x86_64.AppImage --help
            ```

            ## System Requirements
            - Linux x86_64
            - Compatible with Ubuntu 22.04 and newer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
