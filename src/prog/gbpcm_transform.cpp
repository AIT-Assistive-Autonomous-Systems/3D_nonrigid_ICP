#include <spdlog/spdlog.h>
#include <spdlog/stopwatch.h>
#include "src/lib/ioutils.h"
#include "src/lib/ptcloud.h"
#include "src/prog/3rdparty/cxxopts/cxxopts.hpp"

cxxopts::ParseResult ParseUserInputs(int argc, char** argv);

int main(int argc, char** argv) {
  try {
    cxxopts::ParseResult result = ParseUserInputs(argc, argv);

    if (result["suppress_logging"].as<bool>()) {
      spdlog::set_level(spdlog::level::off);
    }

    spdlog::set_pattern("%v");
    spdlog::stopwatch sw;
    spdlog::info("Start of \"gbpcm-transform\"");

    spdlog::info("Create point cloud object");
    auto X = ImportFileToMatrix(std::string(result["pc_in"].as<std::string>()));
    auto pc_mov{PtCloud(X.leftCols(3))};
    spdlog::info("Point cloud has {:d} points", pc_mov.NumPts());

    spdlog::info("Import x/y/z translation grids");
    pc_mov.ImportTranslationGrids(result["transform"].as<std::string>());

    spdlog::info("Transform point cloud");
    pc_mov.InitMatricesForUpdateXt();
    pc_mov.UpdateXt();
    X.leftCols(3) = pc_mov.Xt();

    spdlog::info("Write transformed point cloud to file");
    SaveMatrixToFile(X, result["pc_out"].as<std::string>());

    spdlog::info("Finished \"gbpcm-transform\" in {:.3}s!", sw);

  } catch (const std::exception& e) {
    std::cerr << "Caught exception: " << e.what() << std::endl;
    return 1;
  } catch (...) {
    std::cerr << "Caught unknown exception." << std::endl;
    return 1;
  }

  return 0;
}

cxxopts::ParseResult ParseUserInputs(int argc, char** argv) {
  cxxopts::Options options(
      "gbpcm-transform",
      "Transformation of point cloud using transform file generated by the executable \"gbpcm\"");

  // clang-format off
  options.add_options()
  ("i,pc_in",
   "Path to input point cloud",
   cxxopts::value<std::string>())
  ("o,pc_out",
   "Path to output point cloud, i.e. transformed point cloud",
   cxxopts::value<std::string>())
  ("t,transform",
   "Path to transform file generated by the executable \"gbpcm\"",
   cxxopts::value<std::string>())
  ("s,suppress_logging",
   "Suppress log output",
   cxxopts::value<bool>()->default_value("false"))
  ("h,help",
   "Print usage");
  // clang-format on

  auto result = options.parse(argc, argv);

  if (result.count("help")) {
    std::cout << options.help() << std::endl;
    exit(0);
  }

  return result;
}
