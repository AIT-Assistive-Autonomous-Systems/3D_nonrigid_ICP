#include <spdlog/spdlog.h>
#include <spdlog/stopwatch.h>

#include <cxxopts.hpp>

#include "src/lib/io_utils.hpp"
#include "src/lib/profiler.hpp"
#include "src/lib/pt_cloud.hpp"

struct Params {
  std::string pc_in;
  std::string pc_out;
  std::string transform;
  long chunk_size;
  bool suppress_logging;
  bool profiling;
};

Params ParseUserInputs(int argc, char** argv);

int main(int argc, char** argv) {
  try {
    spdlog::set_pattern("%v");

    Params params = ParseUserInputs(argc, argv);

    auto& profiler = Profiler::Instance();

    spdlog::stopwatch sw;
    spdlog::info("Start of \"nonrigid-icp-transform\"");

    if (params.profiling) profiler.Start("A.01 Read input point cloud");
    spdlog::info("Read input point cloud \"{}\"", params.pc_in);
    auto X = ImportFileToMatrix(params.pc_in, false, false);
    spdlog::info("  Input point cloud has {:d} points", X.rows());
    if (params.profiling) profiler.Stop("A.01 Read input point cloud");

    // Iterate over chunks of the point cloud
    if (params.profiling) profiler.Start("A.02 Transformation of point cloud");
    long num_chunks = X.rows() / params.chunk_size + 1;
    for (long i = 0; i < X.rows(); i += params.chunk_size) {
      spdlog::info("Transforming point cloud chunk {:d}/{:d} ...", i / params.chunk_size + 1,
                   num_chunks);

      // Row indices
      long first_row{i};
      long last_row{std::min(i + params.chunk_size, X.rows())};
      auto row_indices = Eigen::seq(first_row, last_row - 1);

      // Transform points in chunk
      auto pc_mov_chunk{PtCloud(
          X(row_indices, {X.namedColIndex("x"), X.namedColIndex("y"), X.namedColIndex("z")}))};
      // TODO Currently the translation grid is read from file for each chunk. Read once and pass to
      // function.
      pc_mov_chunk.ImportTranslationGrids(params.transform);
      pc_mov_chunk.InitMatricesForUpdateXt();
      pc_mov_chunk.UpdateXt();

      // Update points
      X(row_indices, Eigen::all) = pc_mov_chunk.Xt();
    }
    if (params.profiling) profiler.Stop("A.02 Transformation of point cloud");

    if (params.profiling) profiler.Start("A.03 Write point cloud");
    spdlog::info("Write transformed point cloud to file: \"{}\"", params.pc_out);
    SaveMatrixToFile(X, params.pc_in, params.pc_out);
    if (params.profiling) profiler.Stop("A.03 Write point cloud");

    spdlog::info("Finished \"nonrigid-icp-transform\" in {:.3}s!", sw);

    if (params.profiling && !params.suppress_logging) profiler.PrintSummary();
  } catch (const std::exception& e) {
    std::cerr << "Caught exception: " << e.what() << std::endl;
    return 1;
  } catch (...) {
    std::cerr << "Caught unknown exception." << std::endl;
    return 1;
  }

  return 0;
}

Params ParseUserInputs(int argc, char** argv) {
  cxxopts::Options options("nonrigid-icp-transform",
                           "Transformation of point cloud using transform file generated by the "
                           "executable \"nonrigid-icp\"");

  // clang-format off
  options.add_options()
  ("i,pc_in",
   "Path to input point cloud",
   cxxopts::value<std::string>())
  ("o,pc_out",
   "Path to output point cloud, i.e. transformed point cloud",
   cxxopts::value<std::string>())
  ("t,transform",
   "Path to transform file generated by the executable \"nonrigid-icp\"",
   cxxopts::value<std::string>())
  ("c,chunk_size",
   "Number of points per chunk used for transforming the input point cloud",
   cxxopts::value<long>()->default_value("1000000"))
  ("s,suppress_logging",
   "Suppress log output",
   cxxopts::value<bool>()->default_value("false"))
  ("p,profiling",
    "Enable runtime profiling output (timing summary)",
    cxxopts::value<bool>()->default_value("false"))
  ("h,help",
   "Print usage");
  // clang-format on

  auto result = options.parse(argc, argv);

  if (result.count("help")) {
    std::cout << options.help() << std::endl;
    exit(0);
  }

  // Save to params
  Params params{};
  params.pc_in = result["pc_in"].as<std::string>();
  params.pc_out = result["pc_out"].as<std::string>();
  params.transform = result["transform"].as<std::string>();
  params.chunk_size = result["chunk_size"].as<long>();
  params.suppress_logging = result["suppress_logging"].as<bool>();
  params.profiling = result["profiling"].as<bool>();

  // Check parameter inputs
  if (result["suppress_logging"].as<bool>()) {
    spdlog::set_level(spdlog::level::off);
  }

  return params;
}
