function out = conPointToPlaneDistance(prm, obs, cst, what)
    
    switch what
        
        case 'b'
            
            b = obs.dp;
            out = b;
            
        case 'b0'
            
            % Reshape translation grids from vector shape to tensor shape
            for xyz = ["x" "y" "z"]
                for val = ["F" "Fx" "Fy" "Fz" "Fxy" "Fxz" "Fyz" "Fxyz"]
                    
                    fieldname = xyz + "TranslationGrid" + val;
                    
                    T.(fieldname) = reshape(prm.(fieldname), ...
                        cst.xNoCells, cst.yNoCells, cst.zNoCells);
                end
            end
            
            % Translation components in x, y, and z
            for xyz = ["x" "y" "z"]
                t.(xyz) = getTranslation(...
                    T.(xyz + "TranslationGridF"), ...
                    T.(xyz + "TranslationGridFx"), ...
                    T.(xyz + "TranslationGridFy"), ...
                    T.(xyz + "TranslationGridFz"), ...
                    T.(xyz + "TranslationGridFxy"), ...
                    T.(xyz + "TranslationGridFxz"), ...
                    T.(xyz + "TranslationGridFyz"), ...
                    T.(xyz + "TranslationGridFxyz"), ...
                    cst.xCellRef, ...
                    cst.yCellRef, ...
                    cst.zCellRef, ...
                    cst.dxn, ...
                    cst.dyn, ...
                    cst.dzn);
            end

            % Point-to-plane distances
            dX = [cst.x1 cst.y1 cst.z1] - ([cst.x2 cst.y2 cst.z2] + [t.x t.y t.z]);
            dp = dot(dX, [cst.nx cst.ny cst.nz], 2);
            
            b0 = dp;
            out = b0;
            
        otherwise
            
            derivationVariable = strrep(what, 'der_', '');
            
            switch derivationVariable
                case 'm'
                    db = exp(prm.m * cst.x + prm.c) .* cst.x;
                case 'c'
                    db = exp(prm.m * cst.x + prm.c);
            end
            out = db;
    end
end

function t = getTranslation(...
    translationGridF, ...
    translationGridFx, ...
    translationGridFy, ...
    translationGridFz, ...
    translationGridFxy, ...
    translationGridFxz, ...
    translationGridFyz, ...
    translationGridFxyz, ...
    xCellRef, ...
    yCellRef, ...
    zCellRef, ...
    dxn, ...
    dyn, ...
    dzn)

    f = translationGrid.getValuesOfCellCorners(translationGridF, xCellRef, yCellRef, zCellRef);
    fx = translationGrid.getValuesOfCellCorners(translationGridFx, xCellRef, yCellRef, zCellRef);
    fy = translationGrid.getValuesOfCellCorners(translationGridFy, xCellRef, yCellRef, zCellRef);
    fz = translationGrid.getValuesOfCellCorners(translationGridFz, xCellRef, yCellRef, zCellRef);
    fxy = translationGrid.getValuesOfCellCorners(translationGridFxy, xCellRef, yCellRef, zCellRef);
    fxz = translationGrid.getValuesOfCellCorners(translationGridFxz, xCellRef, yCellRef, zCellRef);
    fyz = translationGrid.getValuesOfCellCorners(translationGridFyz, xCellRef, yCellRef, zCellRef);
    fxyz = translationGrid.getValuesOfCellCorners(translationGridFxyz, xCellRef, yCellRef, zCellRef);

    t = translationGrid.getValue(f, fx, fy, fz, fxy, fxz, fyz, fxyz, dxn, dyn, dzn);

end